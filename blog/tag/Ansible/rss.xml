<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://alamgirm.github.io/blog</title>
   
   <link>https://alamgirm.github.io</link>
   <description>Programming, Automation, Data Science, Machine Learning, Visualizations, Arduino, Raspberry Pi and other IoT.</description>
   <language>en_GB</language>
   <managingEditor> alamgir</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Continuous Integration and Continuous Development on AWS : part III - Ansible</title>
	  <link>/blog//Continuous-Integration-and-Continuous-Deployment-using-AWS-part-III</link>
	  <author>alamgir</author>
	  <pubDate>2017-12-16T15:18:00-05:00</pubDate>
	  <guid>/blog//Continuous-Integration-and-Continuous-Deployment-using-AWS-part-III</guid>
	  <description><![CDATA[
	     <p><img src="assets/images/2017/17_12_16/cicd-0.png" alt="CICD" class="leftimg" />
DevOps philosophy has it that an application is better developed, tested and deployed in small pieces, in a continuous manner. This hopefully serves the changing requirements (of the clients or users) in both time and cost effective way. The developers, and operational team also always have something that is proved to be working, something to roll back to in case a change does not end successfully. To practically embrace the philosphy there needs to be an organizational pipeline where the teams (development, QA testing, deployment, monitoring etc) participate. And for better communication among the teams, most if not all teams use same kind of automation tools/platforms. This post is the first in a series of posts that talks about automation tools, employed on Amazon AWS cloud platform.</p>

<!--more-->

<ol>
  <li>loginto the Ansible Controller instance</li>
  <li>
    <p>Update packages and install pip (that will install ansible). For RH epel needs to be installed first</p>

    <pre>
- Sudo to root: $ sudo su
- Update the OS:# yum -y update
- Install wget: # yum -y install wget
- Download epel repo: # wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
- Install epel repo: # yum -y install epel-release-latest-7.noarch.rpm 
</pre>
  </li>
</ol>

<p>Now the pip installer</p>

<pre>
   - Install pip: # yum -y install python-pip
   - Install ansible: # pip install ansible
   </pre>

<ol>
  <li>
    <p>Install git client</p>

    <pre>
# yum -y install git
</pre>
  </li>
  <li>
    <p>Copy the private key file <code class="highlighter-rouge">HostForAnsibleKey.pem</code> into the home directory.
The controller node need this key to access the host.</p>
  </li>
  <li>
    <p>Manually create an inventory of all the resources. Store it as <code class="highlighter-rouge">/etc/ansible/hosts</code></p>

    <pre>
[test-servers]
 10.179.44.7
</pre>
  </li>
</ol>

<p>[ Alternatively I could use the ec2.py script to list]</p>

<ol>
  <li>Configure ansible. Create a file named <code class="highlighter-rouge">ansible.cfg</code> inside folder <code class="highlighter-rouge">ansible</code>.</li>
</ol>

<pre>
[defaults]
inventory     = /etc/ansible/hosts
remote_user   = ec2-user
become        = True
become_method = sudo
become_user   = root
nocows        = 1
</pre>

<ol>
  <li>Check and see if ansible can access the host.</li>
</ol>

<pre>
ansible -m ping 'test-servers' --private-key ../HostForAnsibleKey.pem
</pre>

<p>If it works fine, the result should be:</p>

<pre>
10.179.44.7 | SUCCESS =&gt; {
    "changed": false, 
    "ping": "pong"
}
</pre>

<h3 id="creating-an-ansible-playbook">Creating an ansible playbook</h3>

<h3 id="creating-helloworld-app">Creating HelloWorld app</h3>
<ol>
  <li>inside ansible folder, create a new folder named roles.</li>
  <li><code class="highlighter-rouge">ansible-galaxy init nodejs</code> creates a new role nodejs
 We’ll use this role to install nodejs on to the target system</li>
  <li>Go inside nodejs, then tasks and edit file main.yml</li>
</ol>
<pre>
---
# tasks file for nodejs

- name: Installing nodejs and npm
  yum:
    name: ""
    enablerepo: epel
    state: installed
  with_items:
    - nodejs
    - npm
</pre>
<p>Whenever ansible runs, it will check the existence of these package, if not found will install.</p>

<ol>
  <li>Another role is needed to install and run the app. Go back to roles folder, and issue
<code class="highlighter-rouge">ansible-galaxy init helloworld</code>. After the role creattion go inside, helloworld and then files.</li>
  <li>This folders contains files that ansible can upload to the target. Lets get 2 files from web (ideally we’d get them from github)</li>
</ol>
<pre>
wget http://bit.ly/2vESNuc -O files/helloworld.js
</pre>
<ol>
  <li>Now go inside the task folder (under helloworld) and edit main.yml file</li>
</ol>
<pre>
- name: Copying the application files
  copy:
    src: helloworld.js
    dest: /home/ec2-user/
    owner: ec2-user
    group: ec2-user
    mode: 0644
  notify: restart helloworld

- name: Copying the upstart file
  copy:
     src: helloworld.conf
     dest: /etc/init/helloworld.conf
     owner: root
     group: root
     mode: 0644

- name: Starting the HelloWorld nodejs service
  service:
      name: helloworld
      state: started
</pre>

<p>Now need to add a handler. Head to folder handlers under helloworld. Edit main.yml</p>
<pre>
- name: restart helloworld
  service:
      name: helloworld
      state: restarted
</pre>

<p>Module dependency. The app needs node4j to run. Open meta/main.yml
At the bottom, remove [] and make it appear</p>
<pre>
dependencies:
   - pre_req
   - nodejs
</pre>

<h3 id="main-playbook-file">Main Playbook file</h3>
<p>Here is the main playbook file</p>
<pre>
---
- hosts: test_servers
  become: yes
  roles:
     - helloworld
</pre>

<p>Now play the playbook file:
<code class="highlighter-rouge">ansible-playbook helloworld.yml --private-key ../HostForAnsibleKey.pem</code></p>

	  ]]></description>
	</item>


</channel>
</rss>
